using AdaptiveExpressions.Converters;
using Iciclecreek.Bot.Builder.Dialogs.Adaptive.GitHub.Triggers;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Dialogs.Declarative;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Bot.Builder.Dialogs.Declarative.Converters;

namespace Iciclecreek.Bot.Builder.Dialogs.Adaptive.GitHub
{
    /// <summary>
    /// Class which contains registration of components for github.
    /// </summary>
    public class GithubBotComponent : BotComponent
    {
        public override void ConfigureServices(IServiceCollection services, IConfiguration configuration)
        {
            // triggers
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubEvent>(OnGitHubEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubCheckRunEvent>(OnGitHubCheckRunEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubCheckSuiteEvent>(OnGitHubCheckSuiteEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubCodeScanningAlertEvent>(OnGitHubCodeScanningAlertEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubCommitCommentEvent>(OnGitHubCommitCommentEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubContentReferenceEvent>(OnGitHubContentReferenceEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubCreateEvent>(OnGitHubCreateEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubDeleteEvent>(OnGitHubDeleteEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubDeployKeyEvent>(OnGitHubDeployKeyEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubDeploymentEvent>(OnGitHubDeploymentEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubDeploymentStatusEvent>(OnGitHubDeploymentStatusEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubForkEvent>(OnGitHubForkEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubGithubAppAuthorizationEvent>(OnGitHubGithubAppAuthorizationEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubGollumEvent>(OnGitHubGollumEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubInstallationEvent>(OnGitHubInstallationEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubInstallationRepositoriesEvent>(OnGitHubInstallationRepositoriesEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubIssueCommentEvent>(OnGitHubIssueCommentEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubIssuesEvent>(OnGitHubIssuesEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubLabelEvent>(OnGitHubLabelEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubMarketplacePurchaseEvent>(OnGitHubMarketplacePurchaseEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubMemberEvent>(OnGitHubMemberEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubMembershipEvent>(OnGitHubMembershipEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubMetaEvent>(OnGitHubMetaEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubMilestoneEvent>(OnGitHubMilestoneEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubOrganizationEvent>(OnGitHubOrganizationEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubOrgBlockEvent>(OnGitHubOrgBlockEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPackageEvent>(OnGitHubPackageEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPageBuildEvent>(OnGitHubPageBuildEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPingEvent>(OnGitHubPingEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubProjectCardEvent>(OnGitHubProjectCardEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubProjectColumnEvent>(OnGitHubProjectColumnEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubProjectEvent>(OnGitHubProjectEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPublicEvent>(OnGitHubPublicEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPullRequestEvent>(OnGitHubPullRequestEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPullRequestReviewCommentEvent>(OnGitHubPullRequestReviewCommentEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPullRequestReviewEvent>(OnGitHubPullRequestReviewEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubPushEvent>(OnGitHubPushEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubReleaseEvent>(OnGitHubReleaseEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubRepositoryDispatchEvent>(OnGitHubRepositoryDispatchEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubRepositoryEvent>(OnGitHubRepositoryEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubRepositoryImportEvent>(OnGitHubRepositoryImportEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubRepositoryVulnerabilityAlertEvent>(OnGitHubRepositoryVulnerabilityAlertEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubSecurityAdvisoryEvent>(OnGitHubSecurityAdvisoryEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubSponsorshipEvent>(OnGitHubSponsorshipEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubStarEvent>(OnGitHubStarEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubStatusEvent>(OnGitHubStatusEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubTeamAddEvent>(OnGitHubTeamAddEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubTeamEvent>(OnGitHubTeamEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubWatchEvent>(OnGitHubWatchEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubWorkflowDispatchEvent>(OnGitHubWorkflowDispatchEvent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<OnGitHubWorkflowRunEvent>(OnGitHubWorkflowRunEvent.Kind));

            // actions
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Current>(GitHubClient.User.Current.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Get>(GitHubClient.User.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Update>(GitHubClient.User.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GpgKey.Create>(GitHubClient.User.GpgKey.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GpgKey.Delete>(GitHubClient.User.GpgKey.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GpgKey.Get>(GitHubClient.User.GpgKey.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GpgKey.GetAllForCurrent>(GitHubClient.User.GpgKey.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GitSshKey.Create>(GitHubClient.User.GitSshKey.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GitSshKey.Delete>(GitHubClient.User.GitSshKey.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GitSshKey.Get>(GitHubClient.User.GitSshKey.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GitSshKey.GetAll>(GitHubClient.User.GitSshKey.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.GitSshKey.GetAllForCurrent>(GitHubClient.User.GitSshKey.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.Follow>(GitHubClient.User.Followers.Follow.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.GetAll>(GitHubClient.User.Followers.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.GetAllFollowing>(GitHubClient.User.Followers.GetAllFollowing.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.GetAllFollowingForCurrent>(GitHubClient.User.Followers.GetAllFollowingForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.GetAllForCurrent>(GitHubClient.User.Followers.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.IsFollowing>(GitHubClient.User.Followers.IsFollowing.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.IsFollowingForCurrent>(GitHubClient.User.Followers.IsFollowingForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Followers.Unfollow>(GitHubClient.User.Followers.Unfollow.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Email.Add>(GitHubClient.User.Email.Add.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Email.Delete>(GitHubClient.User.Email.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Email.GetAll>(GitHubClient.User.Email.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Create>(GitHubClient.User.Administration.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.CreateImpersonationToken>(GitHubClient.User.Administration.CreateImpersonationToken.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Delete>(GitHubClient.User.Administration.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.DeleteImpersonationToken>(GitHubClient.User.Administration.DeleteImpersonationToken.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.DeletePublicKey>(GitHubClient.User.Administration.DeletePublicKey.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Demote>(GitHubClient.User.Administration.Demote.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.ListAllPublicKeys>(GitHubClient.User.Administration.ListAllPublicKeys.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Promote>(GitHubClient.User.Administration.Promote.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Rename>(GitHubClient.User.Administration.Rename.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Suspend>(GitHubClient.User.Administration.Suspend.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.User.Administration.Unsuspend>(GitHubClient.User.Administration.Unsuspend.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Search.SearchCode>(GitHubClient.Search.SearchCode.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Search.SearchIssues>(GitHubClient.Search.SearchIssues.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Search.SearchLabels>(GitHubClient.Search.SearchLabels.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Search.SearchRepo>(GitHubClient.Search.SearchRepo.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Search.SearchUsers>(GitHubClient.Search.SearchUsers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Create>(GitHubClient.Repository.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Delete>(GitHubClient.Repository.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Edit>(GitHubClient.Repository.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Get>(GitHubClient.Repository.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllContributors>(GitHubClient.Repository.GetAllContributors.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllForCurrent>(GitHubClient.Repository.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllForOrg>(GitHubClient.Repository.GetAllForOrg.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllForUser>(GitHubClient.Repository.GetAllForUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllLanguages>(GitHubClient.Repository.GetAllLanguages.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllPublic>(GitHubClient.Repository.GetAllPublic.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllTags>(GitHubClient.Repository.GetAllTags.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetAllTeams>(GitHubClient.Repository.GetAllTeams.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.GetLicenseContents>(GitHubClient.Repository.GetLicenseContents.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Transfer>(GitHubClient.Repository.Transfer.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Traffic.GetAllPaths>(GitHubClient.Repository.Traffic.GetAllPaths.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Traffic.GetAllReferrers>(GitHubClient.Repository.Traffic.GetAllReferrers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Traffic.GetClones>(GitHubClient.Repository.Traffic.GetClones.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Traffic.GetViews>(GitHubClient.Repository.Traffic.GetViews.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Status.Create>(GitHubClient.Repository.Status.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Status.GetAll>(GitHubClient.Repository.Status.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Status.GetCombined>(GitHubClient.Repository.Status.GetCombined.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Statistics.GetCodeFrequency>(GitHubClient.Repository.Statistics.GetCodeFrequency.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Statistics.GetCommitActivity>(GitHubClient.Repository.Statistics.GetCommitActivity.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Statistics.GetContributors>(GitHubClient.Repository.Statistics.GetContributors.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Statistics.GetParticipation>(GitHubClient.Repository.Statistics.GetParticipation.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Statistics.GetPunchCard>(GitHubClient.Repository.Statistics.GetPunchCard.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.Create>(GitHubClient.Repository.Release.Create.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.Delete>(GitHubClient.Repository.Release.Delete.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.DeleteAsset>(GitHubClient.Repository.Release.DeleteAsset.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.Edit>(GitHubClient.Repository.Release.Edit.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.EditAsset>(GitHubClient.Repository.Release.EditAsset.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.Get>(GitHubClient.Repository.Release.Get.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.GetAll>(GitHubClient.Repository.Release.GetAll.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.GetAllAssets>(GitHubClient.Repository.Release.GetAllAssets.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.GetAsset>(GitHubClient.Repository.Release.GetAsset.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.GetLatest>(GitHubClient.Repository.Release.GetLatest.Kind));
            //services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Release.UploadAsset>(GitHubClient.Repository.Release.UploadAsset.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Commits>(GitHubClient.Repository.PullRequest.Commits.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Create>(GitHubClient.Repository.PullRequest.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Files>(GitHubClient.Repository.PullRequest.Files.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Get>(GitHubClient.Repository.PullRequest.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.GetAllForRepository>(GitHubClient.Repository.PullRequest.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Merge>(GitHubClient.Repository.PullRequest.Merge.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Merged>(GitHubClient.Repository.PullRequest.Merged.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Update>(GitHubClient.Repository.PullRequest.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.Create>(GitHubClient.Repository.PullRequest.Review.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.Delete>(GitHubClient.Repository.PullRequest.Review.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.Dismiss>(GitHubClient.Repository.PullRequest.Review.Dismiss.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.Get>(GitHubClient.Repository.PullRequest.Review.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.GetAll>(GitHubClient.Repository.PullRequest.Review.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.GetAllComments>(GitHubClient.Repository.PullRequest.Review.GetAllComments.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.Review.Submit>(GitHubClient.Repository.PullRequest.Review.Submit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewRequest.Create>(GitHubClient.Repository.PullRequest.ReviewRequest.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewRequest.Delete>(GitHubClient.Repository.PullRequest.ReviewRequest.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewRequest.Get>(GitHubClient.Repository.PullRequest.ReviewRequest.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.Create>(GitHubClient.Repository.PullRequest.ReviewComment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.CreateReply>(GitHubClient.Repository.PullRequest.ReviewComment.CreateReply.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.Delete>(GitHubClient.Repository.PullRequest.ReviewComment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.Edit>(GitHubClient.Repository.PullRequest.ReviewComment.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.GetAll>(GitHubClient.Repository.PullRequest.ReviewComment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.GetAllForRepository>(GitHubClient.Repository.PullRequest.ReviewComment.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.PullRequest.ReviewComment.GetComment>(GitHubClient.Repository.PullRequest.ReviewComment.GetComment.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.CreateForOrganization>(GitHubClient.Repository.Project.CreateForOrganization.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.CreateForRepository>(GitHubClient.Repository.Project.CreateForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Delete>(GitHubClient.Repository.Project.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Get>(GitHubClient.Repository.Project.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.GetAllForOrganization>(GitHubClient.Repository.Project.GetAllForOrganization.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.GetAllForRepository>(GitHubClient.Repository.Project.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Update>(GitHubClient.Repository.Project.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.Create>(GitHubClient.Repository.Project.Column.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.Delete>(GitHubClient.Repository.Project.Column.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.Get>(GitHubClient.Repository.Project.Column.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.GetAll>(GitHubClient.Repository.Project.Column.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.Move>(GitHubClient.Repository.Project.Column.Move.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Column.Update>(GitHubClient.Repository.Project.Column.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.Create>(GitHubClient.Repository.Project.Card.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.Delete>(GitHubClient.Repository.Project.Card.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.Get>(GitHubClient.Repository.Project.Card.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.GetAll>(GitHubClient.Repository.Project.Card.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.Move>(GitHubClient.Repository.Project.Card.Move.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Project.Card.Update>(GitHubClient.Repository.Project.Card.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Page.Get>(GitHubClient.Repository.Page.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Page.GetAll>(GitHubClient.Repository.Page.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Page.GetLatest>(GitHubClient.Repository.Page.GetLatest.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Page.RequestPageBuild>(GitHubClient.Repository.Page.RequestPageBuild.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Merging.Create>(GitHubClient.Repository.Merging.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.Accept>(GitHubClient.Repository.Invitation.Accept.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.Decline>(GitHubClient.Repository.Invitation.Decline.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.Delete>(GitHubClient.Repository.Invitation.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.Edit>(GitHubClient.Repository.Invitation.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.GetAllForCurrent>(GitHubClient.Repository.Invitation.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Invitation.GetAllForRepository>(GitHubClient.Repository.Invitation.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Create>(GitHubClient.Repository.Hooks.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Delete>(GitHubClient.Repository.Hooks.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Edit>(GitHubClient.Repository.Hooks.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Get>(GitHubClient.Repository.Hooks.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.GetAll>(GitHubClient.Repository.Hooks.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Ping>(GitHubClient.Repository.Hooks.Ping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Hooks.Test>(GitHubClient.Repository.Hooks.Test.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Forks.Create>(GitHubClient.Repository.Forks.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Forks.GetAll>(GitHubClient.Repository.Forks.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Deployment.Create>(GitHubClient.Repository.Deployment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Deployment.GetAll>(GitHubClient.Repository.Deployment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Deployment.Status.Create>(GitHubClient.Repository.Deployment.Status.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Deployment.Status.GetAll>(GitHubClient.Repository.Deployment.Status.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.DeployKeys.Create>(GitHubClient.Repository.DeployKeys.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.DeployKeys.Delete>(GitHubClient.Repository.DeployKeys.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.DeployKeys.Get>(GitHubClient.Repository.DeployKeys.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.DeployKeys.GetAll>(GitHubClient.Repository.DeployKeys.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.CreateFile>(GitHubClient.Repository.Content.CreateFile.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.DeleteFile>(GitHubClient.Repository.Content.DeleteFile.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetAllContents>(GitHubClient.Repository.Content.GetAllContents.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetAllContentsByRef>(GitHubClient.Repository.Content.GetAllContentsByRef.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetArchive>(GitHubClient.Repository.Content.GetArchive.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetRawContent>(GitHubClient.Repository.Content.GetRawContent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetRawContentByRef>(GitHubClient.Repository.Content.GetRawContentByRef.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetReadme>(GitHubClient.Repository.Content.GetReadme.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.GetReadmeHtml>(GitHubClient.Repository.Content.GetReadmeHtml.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Content.UpdateFile>(GitHubClient.Repository.Content.UpdateFile.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Commit.Compare>(GitHubClient.Repository.Commit.Compare.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Commit.Get>(GitHubClient.Repository.Commit.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Commit.GetAll>(GitHubClient.Repository.Commit.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Commit.GetSha1>(GitHubClient.Repository.Commit.GetSha1.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.Create>(GitHubClient.Repository.Comment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.Delete>(GitHubClient.Repository.Comment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.Get>(GitHubClient.Repository.Comment.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.GetAllForCommit>(GitHubClient.Repository.Comment.GetAllForCommit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.GetAllForRepository>(GitHubClient.Repository.Comment.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Comment.Update>(GitHubClient.Repository.Comment.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.Add>(GitHubClient.Repository.Collaborator.Add.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.Delete>(GitHubClient.Repository.Collaborator.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.GetAll>(GitHubClient.Repository.Collaborator.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.Invite>(GitHubClient.Repository.Collaborator.Invite.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.IsCollaborator>(GitHubClient.Repository.Collaborator.IsCollaborator.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Collaborator.ReviewPermission>(GitHubClient.Repository.Collaborator.ReviewPermission.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.AddAdminEnforcement>(GitHubClient.Repository.Branch.AddAdminEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.AddProtectedBranchTeamRestrictions>(GitHubClient.Repository.Branch.AddProtectedBranchTeamRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.AddProtectedBranchUserRestrictions>(GitHubClient.Repository.Branch.AddProtectedBranchUserRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.AddRequiredStatusChecksContexts>(GitHubClient.Repository.Branch.AddRequiredStatusChecksContexts.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteBranchProtection>(GitHubClient.Repository.Branch.DeleteBranchProtection.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteProtectedBranchRestrictions>(GitHubClient.Repository.Branch.DeleteProtectedBranchRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteProtectedBranchTeamRestrictions>(GitHubClient.Repository.Branch.DeleteProtectedBranchTeamRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteProtectedBranchUserRestrictions>(GitHubClient.Repository.Branch.DeleteProtectedBranchUserRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteRequiredStatusChecks>(GitHubClient.Repository.Branch.DeleteRequiredStatusChecks.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.DeleteRequiredStatusChecksContexts>(GitHubClient.Repository.Branch.DeleteRequiredStatusChecksContexts.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.Get>(GitHubClient.Repository.Branch.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetAdminEnforcement>(GitHubClient.Repository.Branch.GetAdminEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetAll>(GitHubClient.Repository.Branch.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetAllProtectedBranchTeamRestrictions>(GitHubClient.Repository.Branch.GetAllProtectedBranchTeamRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetAllProtectedBranchUserRestrictions>(GitHubClient.Repository.Branch.GetAllProtectedBranchUserRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetAllRequiredStatusChecksContexts>(GitHubClient.Repository.Branch.GetAllRequiredStatusChecksContexts.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetBranchProtection>(GitHubClient.Repository.Branch.GetBranchProtection.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetProtectedBranchRestrictions>(GitHubClient.Repository.Branch.GetProtectedBranchRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetRequiredStatusChecks>(GitHubClient.Repository.Branch.GetRequiredStatusChecks.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.GetReviewEnforcement>(GitHubClient.Repository.Branch.GetReviewEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.RemoveAdminEnforcement>(GitHubClient.Repository.Branch.RemoveAdminEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.RemoveReviewEnforcement>(GitHubClient.Repository.Branch.RemoveReviewEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateBranchProtection>(GitHubClient.Repository.Branch.UpdateBranchProtection.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateProtectedBranchTeamRestrictions>(GitHubClient.Repository.Branch.UpdateProtectedBranchTeamRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateProtectedBranchUserRestrictions>(GitHubClient.Repository.Branch.UpdateProtectedBranchUserRestrictions.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateRequiredStatusChecks>(GitHubClient.Repository.Branch.UpdateRequiredStatusChecks.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateRequiredStatusChecksContexts>(GitHubClient.Repository.Branch.UpdateRequiredStatusChecksContexts.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Repository.Branch.UpdateReviewEnforcement>(GitHubClient.Repository.Branch.UpdateReviewEnforcement.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.Delete>(GitHubClient.Reaction.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.PullRequestReviewComment.Create>(GitHubClient.Reaction.PullRequestReviewComment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.PullRequestReviewComment.GetAll>(GitHubClient.Reaction.PullRequestReviewComment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.Issue.Create>(GitHubClient.Reaction.Issue.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.Issue.GetAll>(GitHubClient.Reaction.Issue.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.IssueComment.Create>(GitHubClient.Reaction.IssueComment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.IssueComment.GetAll>(GitHubClient.Reaction.IssueComment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.CommitComment.Create>(GitHubClient.Reaction.CommitComment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Reaction.CommitComment.GetAll>(GitHubClient.Reaction.CommitComment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Commits>(GitHubClient.PullRequest.Commits.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Create>(GitHubClient.PullRequest.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Files>(GitHubClient.PullRequest.Files.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Get>(GitHubClient.PullRequest.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.GetAllForRepository>(GitHubClient.PullRequest.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Merge>(GitHubClient.PullRequest.Merge.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Merged>(GitHubClient.PullRequest.Merged.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Update>(GitHubClient.PullRequest.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.Create>(GitHubClient.PullRequest.Review.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.Delete>(GitHubClient.PullRequest.Review.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.Dismiss>(GitHubClient.PullRequest.Review.Dismiss.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.Get>(GitHubClient.PullRequest.Review.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.GetAll>(GitHubClient.PullRequest.Review.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.GetAllComments>(GitHubClient.PullRequest.Review.GetAllComments.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.Review.Submit>(GitHubClient.PullRequest.Review.Submit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewRequest.Create>(GitHubClient.PullRequest.ReviewRequest.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewRequest.Delete>(GitHubClient.PullRequest.ReviewRequest.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewRequest.Get>(GitHubClient.PullRequest.ReviewRequest.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.Create>(GitHubClient.PullRequest.ReviewComment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.CreateReply>(GitHubClient.PullRequest.ReviewComment.CreateReply.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.Delete>(GitHubClient.PullRequest.ReviewComment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.Edit>(GitHubClient.PullRequest.ReviewComment.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.GetAll>(GitHubClient.PullRequest.ReviewComment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.GetAllForRepository>(GitHubClient.PullRequest.ReviewComment.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.PullRequest.ReviewComment.GetComment>(GitHubClient.PullRequest.ReviewComment.GetComment.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Get>(GitHubClient.Organization.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.GetAll>(GitHubClient.Organization.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.GetAllForCurrent>(GitHubClient.Organization.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.GetAllForUser>(GitHubClient.Organization.GetAllForUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Update>(GitHubClient.Organization.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.AddOrEditMembership>(GitHubClient.Organization.Team.AddOrEditMembership.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.AddRepository>(GitHubClient.Organization.Team.AddRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.Create>(GitHubClient.Organization.Team.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.Delete>(GitHubClient.Organization.Team.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.Get>(GitHubClient.Organization.Team.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAll>(GitHubClient.Organization.Team.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAllChildTeams>(GitHubClient.Organization.Team.GetAllChildTeams.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAllForCurrent>(GitHubClient.Organization.Team.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAllMembers>(GitHubClient.Organization.Team.GetAllMembers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAllPendingInvitations>(GitHubClient.Organization.Team.GetAllPendingInvitations.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetAllRepositories>(GitHubClient.Organization.Team.GetAllRepositories.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.GetMembershipDetails>(GitHubClient.Organization.Team.GetMembershipDetails.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.IsRepositoryManagedByTeam>(GitHubClient.Organization.Team.IsRepositoryManagedByTeam.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.RemoveMembership>(GitHubClient.Organization.Team.RemoveMembership.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.RemoveRepository>(GitHubClient.Organization.Team.RemoveRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Team.Update>(GitHubClient.Organization.Team.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.OutsideCollaborator.ConvertFromMember>(GitHubClient.Organization.OutsideCollaborator.ConvertFromMember.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.OutsideCollaborator.Delete>(GitHubClient.Organization.OutsideCollaborator.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.OutsideCollaborator.GetAll>(GitHubClient.Organization.OutsideCollaborator.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.AddOrUpdateOrganizationMembership>(GitHubClient.Organization.Member.AddOrUpdateOrganizationMembership.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.CheckMember>(GitHubClient.Organization.Member.CheckMember.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.CheckMemberPublic>(GitHubClient.Organization.Member.CheckMemberPublic.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.Conceal>(GitHubClient.Organization.Member.Conceal.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.Delete>(GitHubClient.Organization.Member.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.GetAll>(GitHubClient.Organization.Member.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.GetAllPendingInvitations>(GitHubClient.Organization.Member.GetAllPendingInvitations.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.GetAllPublic>(GitHubClient.Organization.Member.GetAllPublic.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.GetOrganizationMembership>(GitHubClient.Organization.Member.GetOrganizationMembership.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.Publicize>(GitHubClient.Organization.Member.Publicize.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Member.RemoveOrganizationMembership>(GitHubClient.Organization.Member.RemoveOrganizationMembership.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.Create>(GitHubClient.Organization.Hook.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.Delete>(GitHubClient.Organization.Hook.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.Edit>(GitHubClient.Organization.Hook.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.Get>(GitHubClient.Organization.Hook.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.GetAll>(GitHubClient.Organization.Hook.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Organization.Hook.Ping>(GitHubClient.Organization.Hook.Ping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Oauth.CreateAccessToken>(GitHubClient.Oauth.CreateAccessToken.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Oauth.GetGitHubLoginUrl>(GitHubClient.Oauth.GetGitHubLoginUrl.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetAllEmojis>(GitHubClient.Miscellaneous.GetAllEmojis.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetAllGitIgnoreTemplates>(GitHubClient.Miscellaneous.GetAllGitIgnoreTemplates.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetAllLicenses>(GitHubClient.Miscellaneous.GetAllLicenses.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetGitIgnoreTemplate>(GitHubClient.Miscellaneous.GetGitIgnoreTemplate.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetLicense>(GitHubClient.Miscellaneous.GetLicense.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetMetadata>(GitHubClient.Miscellaneous.GetMetadata.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.GetRateLimits>(GitHubClient.Miscellaneous.GetRateLimits.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.RenderArbitraryMarkdown>(GitHubClient.Miscellaneous.RenderArbitraryMarkdown.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Miscellaneous.RenderRawMarkdown>(GitHubClient.Miscellaneous.RenderRawMarkdown.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.DeleteArchive>(GitHubClient.Migration.Migrations.DeleteArchive.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.Get>(GitHubClient.Migration.Migrations.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.GetAll>(GitHubClient.Migration.Migrations.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.GetArchive>(GitHubClient.Migration.Migrations.GetArchive.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.Start>(GitHubClient.Migration.Migrations.Start.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Migration.Migrations.UnlockRepository>(GitHubClient.Migration.Migrations.UnlockRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Create>(GitHubClient.Issue.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Get>(GitHubClient.Issue.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.GetAllForCurrent>(GitHubClient.Issue.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.GetAllForOrganization>(GitHubClient.Issue.GetAllForOrganization.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.GetAllForOwnedAndMemberRepositories>(GitHubClient.Issue.GetAllForOwnedAndMemberRepositories.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.GetAllForRepository>(GitHubClient.Issue.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Lock>(GitHubClient.Issue.Lock.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Unlock>(GitHubClient.Issue.Unlock.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Update>(GitHubClient.Issue.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Timeline.GetAllForIssue>(GitHubClient.Issue.Timeline.GetAllForIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Milestone.Create>(GitHubClient.Issue.Milestone.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Milestone.Delete>(GitHubClient.Issue.Milestone.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Milestone.Get>(GitHubClient.Issue.Milestone.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Milestone.GetAllForRepository>(GitHubClient.Issue.Milestone.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Milestone.Update>(GitHubClient.Issue.Milestone.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.AddToIssue>(GitHubClient.Issue.Labels.AddToIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.Create>(GitHubClient.Issue.Labels.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.Delete>(GitHubClient.Issue.Labels.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.Get>(GitHubClient.Issue.Labels.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.GetAllForIssue>(GitHubClient.Issue.Labels.GetAllForIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.GetAllForMilestone>(GitHubClient.Issue.Labels.GetAllForMilestone.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.GetAllForRepository>(GitHubClient.Issue.Labels.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.RemoveAllFromIssue>(GitHubClient.Issue.Labels.RemoveAllFromIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.RemoveFromIssue>(GitHubClient.Issue.Labels.RemoveFromIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.ReplaceAllForIssue>(GitHubClient.Issue.Labels.ReplaceAllForIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Labels.Update>(GitHubClient.Issue.Labels.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Events.Get>(GitHubClient.Issue.Events.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Events.GetAllForIssue>(GitHubClient.Issue.Events.GetAllForIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Events.GetAllForRepository>(GitHubClient.Issue.Events.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.Create>(GitHubClient.Issue.Comment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.Delete>(GitHubClient.Issue.Comment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.Get>(GitHubClient.Issue.Comment.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.GetAllForIssue>(GitHubClient.Issue.Comment.GetAllForIssue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.GetAllForRepository>(GitHubClient.Issue.Comment.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Comment.Update>(GitHubClient.Issue.Comment.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Assignee.AddAssignees>(GitHubClient.Issue.Assignee.AddAssignees.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Assignee.CheckAssignee>(GitHubClient.Issue.Assignee.CheckAssignee.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Assignee.GetAllForRepository>(GitHubClient.Issue.Assignee.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Issue.Assignee.RemoveAssignees>(GitHubClient.Issue.Assignee.RemoveAssignees.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Tree.Create>(GitHubClient.Git.Tree.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Tree.Get>(GitHubClient.Git.Tree.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Tree.GetRecursive>(GitHubClient.Git.Tree.GetRecursive.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Tag.Create>(GitHubClient.Git.Tag.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Tag.Get>(GitHubClient.Git.Tag.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.Create>(GitHubClient.Git.Reference.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.Delete>(GitHubClient.Git.Reference.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.Get>(GitHubClient.Git.Reference.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.GetAll>(GitHubClient.Git.Reference.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.GetAllForSubNamespace>(GitHubClient.Git.Reference.GetAllForSubNamespace.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Reference.Update>(GitHubClient.Git.Reference.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Commit.Create>(GitHubClient.Git.Commit.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Commit.Get>(GitHubClient.Git.Commit.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Blob.Create>(GitHubClient.Git.Blob.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Git.Blob.Get>(GitHubClient.Git.Blob.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.CreateInstallationToken>(GitHubClient.GitHubApps.CreateInstallationToken.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.Get>(GitHubClient.GitHubApps.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetAllInstallationsForCurrent>(GitHubClient.GitHubApps.GetAllInstallationsForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetAllInstallationsForCurrentUser>(GitHubClient.GitHubApps.GetAllInstallationsForCurrentUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetCurrent>(GitHubClient.GitHubApps.GetCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetInstallation>(GitHubClient.GitHubApps.GetInstallation.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetInstallationForCurrent>(GitHubClient.GitHubApps.GetInstallationForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetOrganizationInstallationForCurrent>(GitHubClient.GitHubApps.GetOrganizationInstallationForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetRepositoryInstallationForCurrent>(GitHubClient.GitHubApps.GetRepositoryInstallationForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.GetUserInstallationForCurrent>(GitHubClient.GitHubApps.GetUserInstallationForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.Installation.GetAllRepositoriesForCurrent>(GitHubClient.GitHubApps.Installation.GetAllRepositoriesForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.GitHubApps.Installation.GetAllRepositoriesForCurrentUser>(GitHubClient.GitHubApps.Installation.GetAllRepositoriesForCurrentUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Create>(GitHubClient.Gist.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Delete>(GitHubClient.Gist.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Edit>(GitHubClient.Gist.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Fork>(GitHubClient.Gist.Fork.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Get>(GitHubClient.Gist.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAll>(GitHubClient.Gist.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAllCommits>(GitHubClient.Gist.GetAllCommits.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAllForks>(GitHubClient.Gist.GetAllForks.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAllForUser>(GitHubClient.Gist.GetAllForUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAllPublic>(GitHubClient.Gist.GetAllPublic.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.GetAllStarred>(GitHubClient.Gist.GetAllStarred.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.IsStarred>(GitHubClient.Gist.IsStarred.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Star>(GitHubClient.Gist.Star.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Unstar>(GitHubClient.Gist.Unstar.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Comment.Create>(GitHubClient.Gist.Comment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Comment.Delete>(GitHubClient.Gist.Comment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Comment.Get>(GitHubClient.Gist.Comment.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Comment.GetAllForGist>(GitHubClient.Gist.Comment.GetAllForGist.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Gist.Comment.Update>(GitHubClient.Gist.Comment.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.SearchIndexing.Queue>(GitHubClient.Enterprise.SearchIndexing.Queue.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.SearchIndexing.QueueAll>(GitHubClient.Enterprise.SearchIndexing.QueueAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.SearchIndexing.QueueAllCode>(GitHubClient.Enterprise.SearchIndexing.QueueAllCode.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.SearchIndexing.QueueAllIssues>(GitHubClient.Enterprise.SearchIndexing.QueueAllIssues.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.Create>(GitHubClient.Enterprise.PreReceiveEnvironment.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.Delete>(GitHubClient.Enterprise.PreReceiveEnvironment.Delete.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.DownloadStatus>(GitHubClient.Enterprise.PreReceiveEnvironment.DownloadStatus.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.Edit>(GitHubClient.Enterprise.PreReceiveEnvironment.Edit.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.Get>(GitHubClient.Enterprise.PreReceiveEnvironment.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.GetAll>(GitHubClient.Enterprise.PreReceiveEnvironment.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.PreReceiveEnvironment.TriggerDownload>(GitHubClient.Enterprise.PreReceiveEnvironment.TriggerDownload.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.Organization.Create>(GitHubClient.Enterprise.Organization.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.ManagementConsole.EditMaintenanceMode>(GitHubClient.Enterprise.ManagementConsole.EditMaintenanceMode.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.ManagementConsole.GetMaintenanceMode>(GitHubClient.Enterprise.ManagementConsole.GetMaintenanceMode.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.License.Get>(GitHubClient.Enterprise.License.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.Ldap.QueueSyncTeamMapping>(GitHubClient.Enterprise.Ldap.QueueSyncTeamMapping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.Ldap.QueueSyncUserMapping>(GitHubClient.Enterprise.Ldap.QueueSyncUserMapping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.Ldap.UpdateTeamMapping>(GitHubClient.Enterprise.Ldap.UpdateTeamMapping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.Ldap.UpdateUserMapping>(GitHubClient.Enterprise.Ldap.UpdateUserMapping.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsAll>(GitHubClient.Enterprise.AdminStats.GetStatisticsAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsComments>(GitHubClient.Enterprise.AdminStats.GetStatisticsComments.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsGists>(GitHubClient.Enterprise.AdminStats.GetStatisticsGists.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsHooks>(GitHubClient.Enterprise.AdminStats.GetStatisticsHooks.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsIssues>(GitHubClient.Enterprise.AdminStats.GetStatisticsIssues.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsMilestones>(GitHubClient.Enterprise.AdminStats.GetStatisticsMilestones.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsOrgs>(GitHubClient.Enterprise.AdminStats.GetStatisticsOrgs.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsPages>(GitHubClient.Enterprise.AdminStats.GetStatisticsPages.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsPulls>(GitHubClient.Enterprise.AdminStats.GetStatisticsPulls.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsRepos>(GitHubClient.Enterprise.AdminStats.GetStatisticsRepos.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Enterprise.AdminStats.GetStatisticsUsers>(GitHubClient.Enterprise.AdminStats.GetStatisticsUsers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Suite.Create>(GitHubClient.Check.Suite.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Suite.Get>(GitHubClient.Check.Suite.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Suite.GetAllForReference>(GitHubClient.Check.Suite.GetAllForReference.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Suite.Rerequest>(GitHubClient.Check.Suite.Rerequest.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Suite.UpdatePreferences>(GitHubClient.Check.Suite.UpdatePreferences.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.Create>(GitHubClient.Check.Run.Create.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.Get>(GitHubClient.Check.Run.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.GetAllAnnotations>(GitHubClient.Check.Run.GetAllAnnotations.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.GetAllForCheckSuite>(GitHubClient.Check.Run.GetAllForCheckSuite.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.GetAllForReference>(GitHubClient.Check.Run.GetAllForReference.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Check.Run.Update>(GitHubClient.Check.Run.Update.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.CheckWatched>(GitHubClient.Activity.Watching.CheckWatched.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.GetAllForCurrent>(GitHubClient.Activity.Watching.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.GetAllForUser>(GitHubClient.Activity.Watching.GetAllForUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.GetAllWatchers>(GitHubClient.Activity.Watching.GetAllWatchers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.UnwatchRepo>(GitHubClient.Activity.Watching.UnwatchRepo.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Watching.WatchRepo>(GitHubClient.Activity.Watching.WatchRepo.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.CheckStarred>(GitHubClient.Activity.Starring.CheckStarred.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllForCurrent>(GitHubClient.Activity.Starring.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllForCurrentWithTimestamps>(GitHubClient.Activity.Starring.GetAllForCurrentWithTimestamps.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllForUser>(GitHubClient.Activity.Starring.GetAllForUser.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllForUserWithTimestamps>(GitHubClient.Activity.Starring.GetAllForUserWithTimestamps.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllStargazers>(GitHubClient.Activity.Starring.GetAllStargazers.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.GetAllStargazersWithTimestamps>(GitHubClient.Activity.Starring.GetAllStargazersWithTimestamps.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.RemoveStarFromRepo>(GitHubClient.Activity.Starring.RemoveStarFromRepo.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Starring.StarRepo>(GitHubClient.Activity.Starring.StarRepo.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.DeleteThreadSubscription>(GitHubClient.Activity.Notifications.DeleteThreadSubscription.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.Get>(GitHubClient.Activity.Notifications.Get.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.GetAllForCurrent>(GitHubClient.Activity.Notifications.GetAllForCurrent.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.GetAllForRepository>(GitHubClient.Activity.Notifications.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.GetThreadSubscription>(GitHubClient.Activity.Notifications.GetThreadSubscription.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.MarkAsRead>(GitHubClient.Activity.Notifications.MarkAsRead.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.MarkAsReadForRepository>(GitHubClient.Activity.Notifications.MarkAsReadForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Notifications.SetThreadSubscription>(GitHubClient.Activity.Notifications.SetThreadSubscription.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Feeds.GetFeeds>(GitHubClient.Activity.Feeds.GetFeeds.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAll>(GitHubClient.Activity.Events.GetAll.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllForAnOrganization>(GitHubClient.Activity.Events.GetAllForAnOrganization.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllForOrganization>(GitHubClient.Activity.Events.GetAllForOrganization.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllForRepository>(GitHubClient.Activity.Events.GetAllForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllForRepositoryNetwork>(GitHubClient.Activity.Events.GetAllForRepositoryNetwork.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllIssuesForRepository>(GitHubClient.Activity.Events.GetAllIssuesForRepository.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllUserPerformed>(GitHubClient.Activity.Events.GetAllUserPerformed.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllUserPerformedPublic>(GitHubClient.Activity.Events.GetAllUserPerformedPublic.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllUserReceived>(GitHubClient.Activity.Events.GetAllUserReceived.Kind));
            services.AddSingleton<DeclarativeType>((sp) => new DeclarativeType<GitHubClient.Activity.Events.GetAllUserReceivedPublic>(GitHubClient.Activity.Events.GetAllUserReceivedPublic.Kind));

            // converters....
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UserUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewGpgKey>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewPublicKey>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.String[]>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.String[]>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewUser>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewImpersonationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UserRename>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.SearchCodeRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.SearchIssuesRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.SearchLabelsRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.SearchRepositoriesRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.SearchUsersRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewRepository>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PublicRepositoryRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryTransfer>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryTrafficRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryTrafficRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewCommitStatus>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.Threading.CancellationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.Threading.CancellationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.Threading.CancellationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.Threading.CancellationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.Threading.CancellationToken>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewRelease>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ReleaseUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ReleaseAssetUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.Release>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ReleaseAssetUpload>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewPullRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MergePullRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewDismiss>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewSubmit>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentReplyCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentEdit>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewProject>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewProject>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewProjectColumn>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectColumnMove>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectColumnUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewProjectCard>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectCardRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectCardMove>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ProjectCardUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewMerge>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.InvitationUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewRepositoryHook>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.EditRepositoryHook>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewRepositoryFork>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryForksListRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewDeployment>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewDeploymentStatus>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewDeployKey>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CreateFileRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.DeleteFileRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ArchiveFormat>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.TimeSpan>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UpdateFileRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CommitRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewCommitComment>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CollaboratorRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryCollaboratorListRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CollaboratorRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionTeamCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionUserCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionTeamCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionUserCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionSettingsUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionTeamCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionUserCollection>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionRequiredStatusChecksUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.BranchProtectionRequiredReviewsUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewReaction>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewReaction>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewReaction>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewReaction>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewPullRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MergePullRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewDismiss>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewSubmit>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentReplyCreate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentEdit>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.PullRequestReviewCommentRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UpdateTeamMembership>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryPermissionRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewTeam>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.TeamMembersRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UpdateTeam>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationMembersFilter>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationMembershipUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationMembersFilter>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OrganizationMembersRole>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewOrganizationHook>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.EditOrganizationHook>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OauthTokenRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.OauthLoginRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewArbitraryMarkdown>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.StartMigrationRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewIssue>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.RepositoryIssueRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewMilestone>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MilestoneRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MilestoneUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.String[]>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewLabel>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.String[]>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.LabelUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueCommentRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.IssueCommentRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.AssigneesUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.AssigneesUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewTree>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewTag>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewReference>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ReferenceUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewCommit>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewBlob>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewGist>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.GistUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.DateTime>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.DateTime>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.DateTime>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<System.DateTime>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewPreReceiveEnvironment>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UpdatePreReceiveEnvironment>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewOrganization>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.UpdateMaintenanceRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewLdapMapping>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewLdapMapping>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewCheckSuite>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CheckSuiteRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CheckSuitePreferences>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewCheckRun>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CheckRunRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CheckRunRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.CheckRunUpdate>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewSubscription>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.StarredRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.StarredRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.StarredRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.StarredRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NotificationsRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NotificationsRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MarkAsReadRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.MarkAsReadRequest>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.NewThreadSubscription>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
            services.AddSingleton<JsonConverterFactory, JsonConverterFactory<ObjectExpressionConverter<Octokit.ApiOptions>>>();
        }
    }
}
